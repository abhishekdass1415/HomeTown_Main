// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String?
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products      Product[]
  inventoryLogs InventoryLog[]

  @@map("users")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  sku         String   @unique
  stock       Int      @default(0)
  lowStock    Int      @default(5)
  status      String   @default("In Stock")
  imageUrl    String?
  brand       String?
  color       String?
  material    String?
  warranty    String?
  features    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId    String?   @db.ObjectId
  category      Category? @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inventoryLogs InventoryLog[]
  userId        String?   @db.ObjectId
  user          User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("products")
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  status      String    @default("Active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  //image     

  // Self-relation for subcategories
  parentId String?     @db.ObjectId
  parent   Category?   @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Category[]  @relation("CategoryToCategory")

  // Relations
  products Product[]

  @@map("categories")
}

model Customer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

model InventoryLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  change    Int
  reason    String
  notes     String?
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId  String? @db.ObjectId
  user    User?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("inventory_logs")
}
